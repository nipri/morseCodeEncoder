
morseCodeEncoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800200  00000364  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008003a4  008003a4  0000059c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e1f  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4c  00000000  00000000  00001463  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e3  00000000  00000000  000020af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f1  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000116  00000000  00000000  00002c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6f c0       	rjmp	.+222    	; 0x124 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	95 c0       	rjmp	.+298    	; 0x180 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	68 c0       	rjmp	.+208    	; 0x152 <__vector_32>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e6       	ldi	r30, 0x64	; 100
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 3a       	cpi	r26, 0xA4	; 164
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a4 ea       	ldi	r26, 0xA4	; 164
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 3a       	cpi	r26, 0xAF	; 175
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	51 d0       	rcall	.+162    	; 0x1c2 <main>
 120:	1f c1       	rjmp	.+574    	; 0x360 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_17>:
//uint8_t string[] = {0x48,0x45,0x4c,0x4c,0x4f};
char string[] = "hello there";


ISR (TIMER1_COMPA_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	loTimeCount++;
 132:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <loTimeCount>
 136:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <loTimeCount+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <loTimeCount+0x1>
 140:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <loTimeCount>
}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_32>:

ISR (TIMER3_COMPA_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
	hiTimeCount++;
 160:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <hiTimeCount>
 164:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <hiTimeCount+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <hiTimeCount+0x1>
 16e:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <hiTimeCount>
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_21>:

ISR (TIMER0_COMPA_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	8f 93       	push	r24
	count++;
 18c:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <count>
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <count>
	
	if (count >= 61)
 196:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <count>
 19a:	8d 33       	cpi	r24, 0x3D	; 61
 19c:	60 f0       	brcs	.+24     	; 0x1b6 <__vector_21+0x36>
	{
		count = 0;
 19e:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <count>
			
		byte = PORTB;
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <byte>
	
		if (byte & 0x80)
 1a8:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <byte>
 1ac:	88 23       	and	r24, r24
 1ae:	14 f4       	brge	.+4      	; 0x1b4 <__vector_21+0x34>
		{
		//	clear_bit(PORTB, 5);
			PORTB &= ~(1 << 7);
 1b0:	2f 98       	cbi	0x05, 7	; 5
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <__vector_21+0x36>
		}
	
		else
		{
		//	set_bit(PORTB, 5);
			PORTB |= (1 << 7);
 1b4:	2f 9a       	sbi	0x05, 7	; 5
		}
	}
}
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <main>:
{
	static uint8_t length, i, j, k, l;
	static bool done;
	
	/* Timer 0 is flashing the LED for now */
	TCCR0A = 0x0;
 1c2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00; //0x05;
 1c4:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0x02;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	OCR0A = 0xff;
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	97 bd       	out	0x27, r25	; 39

	/* Timer 1 is a 1 mS counter to track the low time of the digital input */
	TCCR1A = 0x00;
 1d0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0x01; 
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TIMSK1 = 0x02;
 1da:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	OCR1A = 0x3e80; // Generate an output compare interrupt every 16000 counts (1 mS at 16 MHz)
 1de:	20 e8       	ldi	r18, 0x80	; 128
 1e0:	3e e3       	ldi	r19, 0x3E	; 62
 1e2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 1e6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	/* Timer 3 is a 1 mS counter to track the high time of the digital input */
	TCCR3A = 0x00;
 1ea:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0x01; 
 1ee:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIMSK3 = 0x02;
 1f2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	OCR3A = 0x3e80; // Generate an output compare interrupt every 16000 counts (1 mS at 16 MHz)	
 1f6:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 1fa:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	
	DDRB = 0x81; // Bit 7 drives the on-board LED, bit one will be our keying GPIO
 1fe:	81 e8       	ldi	r24, 0x81	; 129
 200:	84 b9       	out	0x04, r24	; 4
	
	sei();
 202:	78 94       	sei
	
	length = strlen(string);
 204:	e0 e0       	ldi	r30, 0x00	; 0
 206:	f2 e0       	ldi	r31, 0x02	; 2
 208:	01 90       	ld	r0, Z+
 20a:	00 20       	and	r0, r0
 20c:	e9 f7       	brne	.-6      	; 0x208 <main+0x46>
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	e0 50       	subi	r30, 0x00	; 0
 212:	f2 40       	sbci	r31, 0x02	; 2
 214:	e0 93 a8 03 	sts	0x03A8, r30	; 0x8003a8 <length.2245>
//	length = 5;

	set_bit(PORTB, 7);
 218:	2f 9a       	sbi	0x05, 7	; 5
    {	
		
		_delay_ms(2000);
		
		//Find the ith char in the string
		for(i=0; i<length; i++)
 21a:	b1 2c       	mov	r11, r1
					do
					{
						loTimeCount=0;
						hiTimeCount=0;
					
						if(morseCodeLUT[j][k] == 0xd1)
 21c:	0f 2e       	mov	r0, r31
 21e:	fb e0       	ldi	r31, 0x0B	; 11
 220:	ef 2e       	mov	r14, r31
 222:	f0 2d       	mov	r31, r0
 224:	cb 2c       	mov	r12, r11
							set_bit(PORTB, 7);
						}
					
						else if(morseCodeLUT[j][k] == 0xaa)
						{
							done = true;
 226:	ff 24       	eor	r15, r15
 228:	f3 94       	inc	r15
 22a:	3b 2d       	mov	r19, r11
 22c:	df 2d       	mov	r29, r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	87 ea       	ldi	r24, 0xA7	; 167
 232:	91 e6       	ldi	r25, 0x61	; 97
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x72>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x7c>
 23e:	00 00       	nop
    {	
		
		_delay_ms(2000);
		
		//Find the ith char in the string
		for(i=0; i<length; i++)
 240:	b0 92 a7 03 	sts	0x03A7, r11	; 0x8003a7 <i.2246>
 244:	d0 90 a8 03 	lds	r13, 0x03A8	; 0x8003a8 <length.2245>
 248:	dd 20       	and	r13, r13
 24a:	89 f3       	breq	.-30     	; 0x22e <main+0x6c>
 24c:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <__data_end>
 250:	a0 e0       	ldi	r26, 0x00	; 0
 252:	b2 e0       	ldi	r27, 0x02	; 2
 254:	6f ef       	ldi	r22, 0xFF	; 255
 256:	6d 0d       	add	r22, r13
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	7d 4f       	sbci	r23, 0xFD	; 253
			
			done = false;
			
			for (j=0; (j<=36 && !done); j++)
			{
				if(string[i] == morseCodeLUT[j][0])
 25e:	5d 91       	ld	r21, X+
 260:	ec e0       	ldi	r30, 0x0C	; 12
 262:	f2 e0       	ldi	r31, 0x02	; 2
 264:	c1 e0       	ldi	r28, 0x01	; 1
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	40 81       	ld	r20, Z
 26c:	54 13       	cpse	r21, r20
 26e:	53 c0       	rjmp	.+166    	; 0x316 <main+0x154>
 270:	21 e0       	ldi	r18, 0x01	; 1
					do
					{
						loTimeCount=0;
						hiTimeCount=0;
					
						if(morseCodeLUT[j][k] == 0xd1)
 272:	e8 9e       	mul	r14, r24
 274:	a0 01       	movw	r20, r0
 276:	e9 9e       	mul	r14, r25
 278:	50 0d       	add	r21, r0
 27a:	11 24       	eor	r1, r1
 27c:	44 5f       	subi	r20, 0xF4	; 244
 27e:	5d 4f       	sbci	r21, 0xFD	; 253
					k=1;
					done = false;
				
					do
					{
						loTimeCount=0;
 280:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <loTimeCount+0x1>
 284:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <loTimeCount>
						hiTimeCount=0;
 288:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <hiTimeCount+0x1>
 28c:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <hiTimeCount>
					
						if(morseCodeLUT[j][k] == 0xd1)
 290:	fa 01       	movw	r30, r20
 292:	e2 0f       	add	r30, r18
 294:	f1 1d       	adc	r31, r1
 296:	80 81       	ld	r24, Z
 298:	81 3d       	cpi	r24, 0xD1	; 209
 29a:	71 f4       	brne	.+28     	; 0x2b8 <main+0xf6>
						{
//							set_bit(PORTB, 7);
							clear_bit(PORTB, 7);
 29c:	2f 98       	cbi	0x05, 7	; 5
							
							//hiTimeCount=0;
							loTimeCount=0;
 29e:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <loTimeCount+0x1>
 2a2:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <loTimeCount>
							do 
							{
							//} while (hiTimeCount <= 30);
							} while (loTimeCount <= 10);
 2a6:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <loTimeCount>
 2aa:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <loTimeCount+0x1>
 2ae:	0b 97       	sbiw	r24, 0x0b	; 11
 2b0:	d0 f3       	brcs	.-12     	; 0x2a6 <main+0xe4>
							
							//clear_bit(PORTB, 7);
							set_bit(PORTB, 7);
 2b2:	2f 9a       	sbi	0x05, 7	; 5
 2b4:	e3 2f       	mov	r30, r19
 2b6:	16 c0       	rjmp	.+44     	; 0x2e4 <main+0x122>
						}
					
						else if(morseCodeLUT[j][k] == 0xda)
 2b8:	8a 3d       	cpi	r24, 0xDA	; 218
 2ba:	71 f4       	brne	.+28     	; 0x2d8 <main+0x116>
						{
							//set_bit(PORTB, 7);
							clear_bit(PORTB, 7);
 2bc:	2f 98       	cbi	0x05, 7	; 5

							//hiTimeCount=0;
							loTimeCount=0;
 2be:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <loTimeCount+0x1>
 2c2:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <loTimeCount>
							do
							{
							//} while (hiTimeCount <= 90);
							} while (loTimeCount <= 30);
 2c6:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <loTimeCount>
 2ca:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <loTimeCount+0x1>
 2ce:	4f 97       	sbiw	r24, 0x1f	; 31
 2d0:	d0 f3       	brcs	.-12     	; 0x2c6 <main+0x104>

							//clear_bit(PORTB, 7);
							set_bit(PORTB, 7);
 2d2:	2f 9a       	sbi	0x05, 7	; 5
 2d4:	e3 2f       	mov	r30, r19
 2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <main+0x122>
						}
					
						else if(morseCodeLUT[j][k] == 0xaa)
 2d8:	8a 3a       	cpi	r24, 0xAA	; 170
 2da:	19 f4       	brne	.+6      	; 0x2e2 <main+0x120>
						{
							done = true;
							//clear_bit(PORTB, 7);
							set_bit(PORTB, 7);
 2dc:	2f 9a       	sbi	0x05, 7	; 5
							set_bit(PORTB, 7);
						}
					
						else if(morseCodeLUT[j][k] == 0xaa)
						{
							done = true;
 2de:	ed 2f       	mov	r30, r29
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <main+0x122>
 2e2:	e3 2f       	mov	r30, r19
							//clear_bit(PORTB, 7);
							set_bit(PORTB, 7);
						}
	
						//loTimeCount = 0;
						hiTimeCount = 0;
 2e4:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <hiTimeCount+0x1>
 2e8:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <hiTimeCount>
						do
						{
						//} while (loTimeCount <= 30);
						} while (hiTimeCount <= 30);
 2ec:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <hiTimeCount>
 2f0:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <hiTimeCount+0x1>
 2f4:	4f 97       	sbiw	r24, 0x1f	; 31
 2f6:	d0 f3       	brcs	.-12     	; 0x2ec <main+0x12a>
					
						k++;
 2f8:	2f 5f       	subi	r18, 0xFF	; 255
					
					} while (!done);
 2fa:	ee 23       	and	r30, r30
 2fc:	09 f4       	brne	.+2      	; 0x300 <main+0x13e>
 2fe:	c0 cf       	rjmp	.-128    	; 0x280 <main+0xbe>
					
					//loTimeCount = 0;
					hiTimeCount = 0;
 300:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <hiTimeCount+0x1>
 304:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <hiTimeCount>
			
					do
					{
					//} while (loTimeCount <= 90);
					} while (hiTimeCount <= 30);					
 308:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <hiTimeCount>
 30c:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <hiTimeCount+0x1>
 310:	4f 97       	sbiw	r24, 0x1f	; 31
 312:	d0 f3       	brcs	.-12     	; 0x308 <main+0x146>
 314:	23 c0       	rjmp	.+70     	; 0x35c <main+0x19a>
				
				}
				
				else if(string[i] == ' ')
 316:	50 32       	cpi	r21, 0x20	; 32
 318:	61 f4       	brne	.+24     	; 0x332 <main+0x170>
				{
					//loTimeCount = 0;
					hiTimeCount = 0;
 31a:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <hiTimeCount+0x1>
 31e:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <hiTimeCount>
					do
					{
					//} while (loTimeCount <= 210);
					} while (hiTimeCount <= 70);
 322:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <hiTimeCount>
 326:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <hiTimeCount+0x1>
 32a:	87 34       	cpi	r24, 0x47	; 71
 32c:	91 05       	cpc	r25, r1
 32e:	c8 f3       	brcs	.-14     	; 0x322 <main+0x160>
 330:	15 c0       	rjmp	.+42     	; 0x35c <main+0x19a>
		for(i=0; i<length; i++)
		{
			
			done = false;
			
			for (j=0; (j<=36 && !done); j++)
 332:	c5 32       	cpi	r28, 0x25	; 37
 334:	11 f4       	brne	.+4      	; 0x33a <main+0x178>
 336:	8c 2d       	mov	r24, r12
 338:	04 c0       	rjmp	.+8      	; 0x342 <main+0x180>
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	cf 5f       	subi	r28, 0xFF	; 255
 33e:	3b 96       	adiw	r30, 0x0b	; 11
 340:	94 cf       	rjmp	.-216    	; 0x26a <main+0xa8>
    {	
		
		_delay_ms(2000);
		
		//Find the ith char in the string
		for(i=0; i<length; i++)
 342:	6a 17       	cp	r22, r26
 344:	7b 07       	cpc	r23, r27
 346:	09 f0       	breq	.+2      	; 0x34a <main+0x188>
 348:	8a cf       	rjmp	.-236    	; 0x25e <main+0x9c>
 34a:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <__data_end>
 34e:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <done.2250>
 352:	c0 93 a5 03 	sts	0x03A5, r28	; 0x8003a5 <j.2247>
 356:	d0 92 a7 03 	sts	0x03A7, r13	; 0x8003a7 <i.2246>
 35a:	69 cf       	rjmp	.-302    	; 0x22e <main+0x6c>
		{
			
			done = false;
			
			for (j=0; (j<=36 && !done); j++)
 35c:	8f 2d       	mov	r24, r15
 35e:	f1 cf       	rjmp	.-30     	; 0x342 <main+0x180>

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
